#./app/main.py
from fastapi import FastAPI, Query, Depends, HTTPException, status
from typing import Optional, List
#from sqlmodel import Session, select
from sqlmodel import SQLModel, Field, create_engine, Session, select
#from app.database import create_db_and_tables, get_session
from database import engine
class Users(SQLModel, table=True):
    id: Optional[int] = Field(default=None, primary_key=True)
    name: str
    email: str 



app = FastAPI()

@app.on_event("startup")
async def on_startup():
    SQLModel.metadata.create_all(engine)

# 샘플 데이터 초기화
@app.post("/users/init/")
def init_users():
    sample_users = [
        Users(name=f"User{i}", email=f"user{i}@example.com") for i in range(1, 21)
    ]
    with Session(engine) as session:
        for user in sample_users:
            session.add(user)
        session.commit()
    return {"message": "20 users initialized"}   

# 특정 사용자 조회 (ID로 한 명)
@app.get("/users/{user_id}", response_model=Users)
def read_user(user_id: int):
    with Session(engine) as session:  # 세션 열기
        user = session.get(Users, user_id)  # ID로 조회
        if not user:  # 없으면 404 에러
            raise HTTPException(status_code=404, detail="User not found")
        return user  # 사용자 반환 
'''
@app.get("/")
async def read_root():
    return {"message":"Hellow everyone"}

@app.get("/items/{item_id}")
async def read_item(item_id:int):
    return {"item_id":item_id, "message": f"아이템 번호는 {item_id}입니다."}

@app.get("/user/{user_id}/items/{item_id}")
async def read_item(user_id:int,item_id:int):
    return {"item_id":item_id, "user_id":user_id, "message": f"아이템 번호는 {item_id}, user_id는 {user_id}입니다."}

@app.get("/user/me")
async def read_user_me():
    return {"user_id":"current_user", "message":"나야 나"}

@app.get("/user/{user_id}")
async def read_user_me(user_id:int):
    return {"user_id":"current_user", "message":f"{user_id}나야 나"}



import uuid
@app.get("/products/{product_uuid}")
async def get_product_by_uuid(product_uuid:uuid.UUID):
    return {"product_uuid": str(product_uuid), "message":"product id by UUID"}




@app.get("/product/")
async def read_products(
    q: Optional[str]=None,
    short: bool=False,
    skip: int=0,
    limit:int=10
):
    results = {"skip":skip, "limit":limit}
    if q:
        results.update({"q":q})
    if not short:
        results.update({"description":"dsalfj/a;lwl"})
    return results

@app.get("/search_items/")
async def search_items(
    keyword:str= Query(...,min_length=3, max_length=50, description="검색키워드 3자에서 50자"),
    max_price:Optional[float] = Query(None, gt=0, description="최대가격이 0보다 커야한다."),
    min_price:Optional[float] = Query(None, ge=0, description="최대가격이 0보다 크거나 같아야 한다.")
):
    results = {"keyword":f"{keyword}"}
    if max_price is not None:
        results.update({"max_price":max_price})
    if min_price is not None:
        results.update({"min_price":min_price})
    return results
'''