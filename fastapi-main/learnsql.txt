#검색방법
SELECT * FROM users WHERE username LIKE 'j%' OR username LIKE '%h'
#특정 칼럼만 보이기
SELECT id,email FROM users WHERE username LIKE 'd%'

#검색방법중 정렬
SELECT * FROM users WHERE username LIKE 'j%' ORDER BY username DESC
SELECT * FROM users ORDER BY email DESC

#포린키 제약 조건에 위배되기 때문에 users테이블에 8번을 먼저 입력해야 한다.
INSERT INTO `profiles` VALUES (8,'','010-121-1010')
#''과 null은 다른 개념이다.
SELECT * FROM `profiles` WHERE bio = '' OR bio IS NULL
#여러 조건을 in안에 쓸 수 있다.
SELECT * FROM `profiles` WHERE user_id = 1 OR user_id=3 OR user_id=5
SELECT * FROM `profiles` WHERE user_id IN (1,3,5)
#조건절에 subquery 를 쓴다.
SELECT * FROM `profiles` WHERE user_id IN (SELECT id FROM users WHERE username LIKE 'd%')
SELECT * FROM `profiles` WHERE user_id IN (6,7)
#subquery 를 table처럼 사용할 수 있다.
SELECT * FROM  (SELECT * FROM `profiles` WHERE phone LIKE '%5%') a WHERE a.bio IS NULL

#행 업데이트
UPDATE posts SET cnt = cnt + 1 WHERE id=3
UPDATE users SET username='dav park' WHERE id=7
#행삭제
DELETE FROM users WHERE id=10

#테이블 변경
ALTER TABLE `blog_db`.`posts` ADD COLUMN `cnt` INT UNSIGNED DEFAULT 0 NULL AFTER `user_id`; 

SELECT * FROM posts WHERE user_id=1

SELECT * FROM posts WHERE id=3

#유저 이름이 emma_brown 인 사람을 뽑아 보시오.
SELECT * FROM users WHERE username ='emma_brown'
#유저 이름이 emma_brown 인 사람의 프로필을 보여줘.
SELECT * FROM `profiles` WHERE user_id = (SELECT id FROM users WHERE username ='emma_brown')
SELECT a.* FROM `profiles` AS a JOIN users AS b ON a.user_id=b.id WHERE b.username='emma_brown'
SELECT `profiles`.* FROM `profiles` JOIN users ON `profiles`.user_id=users.id WHERE users.username='emma_brown'
SELECT * FROM `profiles` WHERE user_id = 5
#유저 이름이 emma_brown이 작성한 글을 보여주시오.
SELECT * FROM `posts` WHERE user_id = (SELECT id FROM users WHERE username ='emma_brown')
SELECT a.* FROM `posts` a JOIN users b ON a.user_id=b.id WHERE b.username='emma_brown'

#학생 이름이 James Wilson 인 사람을 뽑아 보시오.
SELECT * FROM students WHERE NAME='James Wilson'

#학생 이름이 James Wilson 인 사람이 듣는 강의 코드를 보여주시오.
SELECT b.* FROM `students` a JOIN student_courses b ON a.id=b.student_id WHERE a.name='James Wilson'

#학생 이름이 James Wilson 인 사람이 듣는 강의과정을 보여주시오.
SELECT * FROM courses WHERE id IN (SELECT b.courses_id FROM `students` a JOIN student_courses b ON a.id=b.student_id WHERE a.name='James Wilson')

SELECT c.title FROM (`students` a JOIN student_courses b ON a.id=b.student_id) JOIN courses c ON b.courses_id=c.id WHERE a.name='James Wilson'

#Web Development Bootcamp를 듣는 학생의 이름을 리스트 하시오.
SELECT a.name FROM (`students` a JOIN student_courses b ON a.id=b.student_id) JOIN courses c ON b.courses_id=c.id WHERE c.title='Web Development Bootcamp'

SELECT MIN(id) FROM users
SELECT MAX(id) FROM users
SELECT SUM(id) FROM users
SELECT AVG(id) FROM users
SELECT COUNT(id) FROM users
#limit
SELECT * FROM users LIMIT 5,5

#union
SELECT id, username, NULL FROM users WHERE id BETWEEN 1 AND 3
UNION
SELECT * FROM users WHERE id BETWEEN 6 AND 8

#group by
SELECT * FROM users WHERE email LIKE '%example.com'
SELECT COUNT(*) cnt,SUM(id), username FROM users GROUP BY username HAVING cnt >=1  ORDER BY cnt DESC
SELECT COUNT(*) cnt,SUM(id), username FROM users  GROUP BY username ORDER BY cnt DESC

#distinct
SELECT COUNT(*) FROM users 
SELECT COUNT(DISTINCT *) FROM users; #안돼
SELECT COUNT(DISTINCT username) FROM users
SELECT DISTINCT username, COUNT(*) FROM users GROUP BY username
SELECT DISTINCT student_id, COUNT(*) FROM student_courses GROUP BY student_id

#insert selecct 
INSERT INTO `blog_db`.`student_courses2` SELECT * FROM student_courses
#case when then end, substring
SELECT id, CASE WHEN id>3 THEN '나뻐' ELSE '좋아' END AS g_b, username, SUBSTRING(username, 5,5) FROM users
